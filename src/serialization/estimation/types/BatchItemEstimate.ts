/**
 * This file auto-generated by Fern from our API Definition.
 */

import { ClimatiqApi } from "../../..";
import * as core from "../../../core";
import * as serializers from "../..";

export const BatchItemEstimate: core.schemas.Schema<BatchItemEstimate.Raw, ClimatiqApi.estimation.BatchItemEstimate> =
  core.schemas
    .union("type", {
      response: core.schemas.lazyObject(() => serializers.estimation.EstimateResponse),
      error: core.schemas.lazyObject(() => serializers.estimation.EstimateError),
    })
    .transform<ClimatiqApi.estimation.BatchItemEstimate>({
      parse: (value) => {
        switch (value.type) {
          case "response": {
            return ClimatiqApi.estimation.BatchItemEstimate.response(value);
          }
          case "error": {
            return ClimatiqApi.estimation.BatchItemEstimate.error(value);
          }
          default: {
            return {
              ...(value as any),
              _visit: (visitor) => visitor._other(value),
            };
          }
        }
      },
      json: (value) => value as any,
    });

export declare namespace BatchItemEstimate {
  type Raw = BatchItemEstimate.Response | BatchItemEstimate.Error;

  interface Response extends serializers.estimation.EstimateResponse.Raw {
    type: "response";
  }

  interface Error extends serializers.estimation.EstimateError.Raw {
    type: "error";
  }
}
