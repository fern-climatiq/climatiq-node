/**
 * This file auto-generated by Fern from our API Definition.
 */

import { ClimatiqApi } from "../../..";
import * as core from "../../../core";

export interface Request {
  /**
   * A free-text query that will match ids, names, descriptions, etc. of emission factors.
   * This uses fuzzy matching, so your query does not need to be precise.
   * Spaces need to be encoded as + or %20 .
   * Default is ""
   *
   */
  query?: string;
  /** Filter by the ID of a specific emission factor.	Default is `all` */
  uuid?: string;
  /** Filter by the id of a specific activity. Multiple emission factors might share the same activity. You may specify an asterix (*) at the end of the id to act as a wildcard character, matching any ids that begin with the string before the asterix. */
  activityId?: string;
  /** A deprecated alias for activity_id. Use activity_id instead, as this will be deprecated next version. */
  id?: string;
  /** Filters by emission factor category */
  category?: string;
  /** Filters by emission factor sector */
  sector?: string;
  /** Filters emission factors by data source */
  source?: string;
  /** Filters emission factors by year factor was released */
  year?: string;
  /** Filters emission factors by geographic region to which it applies. You may specify an asterix (*) at the end of the region to act as a wildcard character, matching any regions, such as sub-regions, that begin with the string before the asterix. */
  region?: string;
  /** The Life Cycle Assessment (LCA) activity with which this factor is associated. */
  lcaActivity?: string;
  /** Filters emission factors by what unit (such as money, energy or volume) the factor accepts. */
  unitType?: string;
  /** The calculation method that is used to calculate the emission factor. Can be either ar4 or ar5 */
  calculationMethod?: ClimatiqApi.estimation.CalculationMethod;
  /** Which page of results to retrieve. */
  page?: number;
  /** How many results to return per page. Max is 100. */
  resultsPerPage?: number;
}

export type Response = core.APIResponse<
  ClimatiqApi.emissionFactor.SearchEmissionFactorsResponse,
  ClimatiqApi.emissionFactor.search.Error
>;
export type Error = Error._Unknown;

export declare namespace Error {
  interface _Unknown extends _Utils {
    errorName: void;
    content: core.Fetcher.Error;
  }

  interface _Utils {
    _visit: <Result>(visitor: Error._Visitor<Result>) => Result;
  }

  interface _Visitor<Result> {
    _other: (value: core.Fetcher.Error) => Result;
  }
}
