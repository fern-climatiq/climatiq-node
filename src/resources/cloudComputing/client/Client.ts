/**
 * This file auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../environments";
import * as core from "../../../core";
import { ClimatiqApi } from "../../..";
import urlJoin from "url-join";
import * as serializers from "../../../serialization";

export declare namespace Client {
  interface Options {
    environment?: environments.Environment | string;
    auth?: {
      token?: core.Supplier<core.BearerToken>;
    };
  }
}

/**
 * Climatiq makes endpoints available to help you calculate the carbon footprint of the cloud resources you use. It will automatically select emission factors based on your cloud provider and region, so you get the right emission factor for your datacenter.
 * All the cloud computing endpoints expect you to provide the cloud provider in the url. Where the urls state :provider you must replace it with a supported cloud provider. You can view the supported cloud providers by using the metadata endpoint
 *
 */
export class Client {
  constructor(private readonly options: Client.Options) {}

  public async metadata(): Promise<ClimatiqApi.cloudComputing.metadata.Response> {
    const response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, "/compute"),
      method: "GET",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.auth?.token)),
      },
    });
    if (response.ok) {
      return {
        ok: true,
        body: serializers.cloudComputing.MetadataResponse.parse(
          response.body as serializers.cloudComputing.MetadataResponse.Raw
        ),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }

  public async cpu(request: ClimatiqApi.cloudComputing.cpu.Request): Promise<ClimatiqApi.cloudComputing.cpu.Response> {
    const response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, `/compute/${request.provider}/cpu`),
      method: "POST",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.auth?.token)),
      },
      body: serializers.cloudComputing.CpuRequest.json(request._body),
    });
    if (response.ok) {
      return {
        ok: true,
        body: serializers.estimation.EstimateResponse.parse(
          response.body as serializers.estimation.EstimateResponse.Raw
        ),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }

  public async storage(
    request: ClimatiqApi.cloudComputing.storage.Request
  ): Promise<ClimatiqApi.cloudComputing.storage.Response> {
    const response = await core.fetcher({
      url: urlJoin(
        this.options.environment ?? environments.Environment.Production,
        `/compute/${request.provider}/storage`
      ),
      method: "POST",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.auth?.token)),
      },
      body: serializers.cloudComputing.StorageRequest.json(request._body),
    });
    if (response.ok) {
      return {
        ok: true,
        body: serializers.estimation.EstimateResponse.parse(
          response.body as serializers.estimation.EstimateResponse.Raw
        ),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }

  public async memory(
    request: ClimatiqApi.cloudComputing.memory.Request
  ): Promise<ClimatiqApi.cloudComputing.memory.Response> {
    const response = await core.fetcher({
      url: urlJoin(
        this.options.environment ?? environments.Environment.Production,
        `/compute/${request.provider}/memory`
      ),
      method: "POST",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.auth?.token)),
      },
      body: serializers.cloudComputing.MemoryRequest.json(request._body),
    });
    if (response.ok) {
      return {
        ok: true,
        body: serializers.estimation.EstimateResponse.parse(
          response.body as serializers.estimation.EstimateResponse.Raw
        ),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }
}
