/**
 * This file auto-generated by Fern from our API Definition.
 */

export interface CloudProvider<RawValue extends CloudProvider.RawValue = CloudProvider.RawValue> {
  value: RawValue;
  visit: <Result>(visitor: CloudProvider._Visitor<Result>) => Result;
}

const _Aws: CloudProvider<"aws"> = {
  value: "aws",
  visit: (visitor) => visitor.aws(),
};
const _Gcp: CloudProvider<"gcp"> = {
  value: "gcp",
  visit: (visitor) => visitor.gcp(),
};
const _Azure: CloudProvider<"azure"> = {
  value: "azure",
  visit: (visitor) => visitor.azure(),
};
export const CloudProvider = {
  Aws: _Aws,
  Gcp: _Gcp,
  Azure: _Azure,
  _parse: (value: string): CloudProvider => {
    switch (value) {
      case "aws": {
        return _Aws;
      }
      case "gcp": {
        return _Gcp;
      }
      case "azure": {
        return _Azure;
      }
      default: {
        return {
          value: value as CloudProvider.RawValue,
          visit: (visitor) => visitor._other(value),
        };
      }
    }
  },
} as const;

export declare namespace CloudProvider {
  type RawValue = "aws" | "gcp" | "azure";

  interface _Visitor<Result> {
    aws: () => Result;
    gcp: () => Result;
    azure: () => Result;
    _other: (value: string) => Result;
  }
}
