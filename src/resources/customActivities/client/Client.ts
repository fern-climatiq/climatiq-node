/**
 * This file auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../environments";
import * as core from "../../../core";
import { ClimatiqApi } from "../../..";
import urlJoin from "url-join";
import * as serializers from "../../../serialization";

export declare namespace Client {
  interface Options {
    environment?: environments.Environment | string;
    auth?: {
      token?: core.Supplier<core.BearerToken>;
    };
  }
}

/**
 * Instead of using code to specify emission factors you want to use for your calculations, you can map your own activity identifiers to Climatiq IDs in the Climatiq dashboard, allowing the Climatiq API to recognize whatever values you use to categorize your activities. In the dashboard simply link a custom activity label to an emission factor id, and this can then be used in the custom activities endpoints.
 */
export class Client {
  constructor(private readonly options: Client.Options) {}

  public async estimate(
    request: ClimatiqApi.customActivities.customActivityRequest
  ): Promise<ClimatiqApi.customActivities.estimate.Response> {
    const response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, "/custom-activities/estimate"),
      method: "POST",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.auth?.token)),
      },
      body: serializers.customActivities.customActivityRequest.json(request),
    });
    if (response.ok) {
      return {
        ok: true,
        body: serializers.estimation.EstimateResponse.parse(
          response.body as serializers.estimation.EstimateResponse.Raw
        ),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }

  public async batchCustomActivities(
    request: ClimatiqApi.customActivities.customActivityRequest[]
  ): Promise<ClimatiqApi.customActivities.batchCustomActivities.Response> {
    const response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, "/custom-activities/batch"),
      method: "POST",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.auth?.token)),
      },
      body: serializers.customActivities.batchCustomActivities.Request.json(request),
    });
    if (response.ok) {
      return {
        ok: true,
        body: serializers.customActivities.batchCustomActivitiesResponse.parse(
          response.body as serializers.customActivities.batchCustomActivitiesResponse.Raw
        ),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }
}
