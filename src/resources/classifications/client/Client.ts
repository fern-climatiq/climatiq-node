/**
 * This file auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../environments";
import * as core from "../../../core";
import { ClimatiqApi } from "../../..";
import urlJoin from "url-join";
import * as serializers from "../../../serialization";

export declare namespace Client {
  interface Options {
    environment?: environments.Environment | string;
    auth?: {
      token?: core.Supplier<core.BearerToken>;
    };
  }
}

/**
 * Many sources link emission factors to specific industry classification schemes,
 * and Climatiq makes it possible to select an emission factor based on these industry classification codes.
 * Please see below the list of mappings we currently support, with the datasets that are mapped directly to them (note that the API will also map factors indirectly via the UN correspondence tables):
 * INDUSTRY CLASSIFICATION CODE	PRIMARY DATASET
 *   ISIC Rev. 4	| GHG Protocol (via ISIC 3.1)
 *   NACE Rev. 2	| EXIOBASE3
 *
 */
export class Client {
  constructor(private readonly options: Client.Options) {}

  public async estimate(
    request: ClimatiqApi.classifications.ClassificationRequest
  ): Promise<ClimatiqApi.classifications.estimate.Response> {
    const response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, "/classifications/estimate"),
      method: "POST",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.auth?.token)),
      },
      body: serializers.classifications.ClassificationRequest.json(request),
    });
    if (response.ok) {
      return {
        ok: true,
        body: serializers.estimation.EstimateResponse.parse(
          response.body as serializers.estimation.EstimateResponse.Raw
        ),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }
}
