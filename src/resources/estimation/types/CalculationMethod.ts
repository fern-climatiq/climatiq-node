/**
 * This file auto-generated by Fern from our API Definition.
 */

export interface CalculationMethod<RawValue extends CalculationMethod.RawValue = CalculationMethod.RawValue> {
  value: RawValue;
  visit: <Result>(visitor: CalculationMethod._Visitor<Result>) => Result;
}

const _Ar4: CalculationMethod<"ar4"> = {
  value: "ar4",
  visit: (visitor) => visitor.ar4(),
};
const _Ar5: CalculationMethod<"ar5"> = {
  value: "ar5",
  visit: (visitor) => visitor.ar5(),
};
export const CalculationMethod = {
  Ar4: _Ar4,
  Ar5: _Ar5,
  _parse: (value: string): CalculationMethod => {
    switch (value) {
      case "ar4": {
        return _Ar4;
      }
      case "ar5": {
        return _Ar5;
      }
      default: {
        return {
          value: value as CalculationMethod.RawValue,
          visit: (visitor) => visitor._other(value),
        };
      }
    }
  },
} as const;

export declare namespace CalculationMethod {
  type RawValue = "ar4" | "ar5";

  interface _Visitor<Result> {
    ar4: () => Result;
    ar5: () => Result;
    _other: (value: string) => Result;
  }
}
